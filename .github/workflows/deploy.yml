name: build-and-deploy

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  IMAGE_NAME: microservice

jobs:
  build-and-deploy:
    runs-on: self-hosted
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Select Subscription
        run: az account set --subscription "${{ secrets.AZURE_SUBSCRIPTION_ID }}"

      - name: Build Docker image
        run: |
          docker build -t ${{ secrets.ACR_LOGIN_SERVER }}/${{ env.IMAGE_NAME }}:${{ github.sha }} .

      - name: Push Docker image to ACR
        run: |
          az acr login --name ${{ secrets.ACR_NAME }}
          docker push ${{ secrets.ACR_LOGIN_SERVER }}/${{ env.IMAGE_NAME }}:${{ github.sha }}

      - name: Ensure ACR admin enabled
        run: |
          az acr update --name ${{ secrets.ACR_NAME }} --admin-enabled true

      - name: Create monitoring pull secret
        run: |
          ACR_USER=$(az acr credential show --name ${{ secrets.ACR_NAME }} --query username -o tsv)
          ACR_PASS=$(az acr credential show --name ${{ secrets.ACR_NAME }} --query "passwords[0].value" -o tsv)
          kubectl create namespace monitoring --dry-run=client -o yaml | kubectl apply -f -
          kubectl create secret docker-registry acr-pull-secret \
            --namespace monitoring \
            --docker-server=${{ secrets.ACR_LOGIN_SERVER }} \
            --docker-username="$ACR_USER" \
            --docker-password="$ACR_PASS" \
            --dry-run=client -o yaml | kubectl apply -f -

      - name: Create ingress pull secret
        run: |
          ACR_USER=$(az acr credential show --name ${{ secrets.ACR_NAME }} --query username -o tsv)
          ACR_PASS=$(az acr credential show --name ${{ secrets.ACR_NAME }} --query "passwords[0].value" -o tsv)
          kubectl create namespace ingress-nginx --dry-run=client -o yaml | kubectl apply -f -
          kubectl create secret docker-registry acr-pull-secret \
            --namespace ingress-nginx \
            --docker-server=${{ secrets.ACR_LOGIN_SERVER }} \
            --docker-username="$ACR_USER" \
            --docker-password="$ACR_PASS" \
            --dry-run=client -o yaml | kubectl apply -f -

      - name: Import monitoring images into ACR
        run: |
          if ! az acr repository show --name ${{ secrets.ACR_NAME }} \
            --image monitoring/kube-webhook-certgen:v1.6.3 >/dev/null 2>&1; then
            az acr import --name ${{ secrets.ACR_NAME }} \
              --source registry.k8s.io/ingress-nginx/kube-webhook-certgen:v1.6.3 \
              --image monitoring/kube-webhook-certgen:v1.6.3
          fi
          if ! az acr repository show --name ${{ secrets.ACR_NAME }} \
            --image monitoring/grafana:12.2.0 >/dev/null 2>&1; then
            az acr import --name ${{ secrets.ACR_NAME }} \
              --source docker.io/grafana/grafana:12.2.0 \
              --image monitoring/grafana:12.2.0
          fi
          if ! az acr repository show --name ${{ secrets.ACR_NAME }} \
            --image monitoring/prometheus-operator:v0.86.1 >/dev/null 2>&1; then
            az acr import --name ${{ secrets.ACR_NAME }} \
              --source quay.io/prometheus-operator/prometheus-operator:v0.86.1 \
              --image monitoring/prometheus-operator:v0.86.1
          fi

      - name: Set AKS context
        uses: azure/aks-set-context@v4
        with:
          resource-group: ${{ secrets.AKS_RESOURCE_GROUP }}
          cluster-name: ${{ secrets.AKS_CLUSTER_NAME }}

      - name: Get Jumpbox IP for monitoring ingress
        run: |
          JUMPBOX_IP=$(az network public-ip show -g microservices-dev-rg -n microservices-dev-jumpbox-pip --query ipAddress -o tsv)
          echo "Using Jumpbox public IP for monitoring ingress: $JUMPBOX_IP"
          echo "INGRESS_PUBLIC_IP=$JUMPBOX_IP" >> $GITHUB_ENV

      - name: Detach Jumpbox public IP from VM
        run: |
          echo "Detaching public IP from Jumpbox to reassign to monitoring ingress..."
          JUMPBOX_NIC_ID=$(az vm show -g microservices-dev-rg -n microservices-dev-jumpbox --query networkProfile.networkInterfaces[0].id -o tsv)
          JUMPBOX_NIC_NAME=$(basename "$JUMPBOX_NIC_ID")

          az network nic ip-config update \
            --resource-group microservices-dev-rg \
            --nic-name "$JUMPBOX_NIC_NAME" \
            --name ipconfig1 \
            --remove publicIpAddress || true

          echo "Public IP detached from Jumpbox"

      - name: Helm upgrade
        run: |
          helm upgrade --install ${{ env.IMAGE_NAME }} ./deploy/helm/microservice \
            --namespace ${{ secrets.AKS_NAMESPACE }} \
            --create-namespace \
            --set image.repository=${{ secrets.ACR_LOGIN_SERVER }}/${{ env.IMAGE_NAME }} \
            --set image.tag=${{ github.sha }}

      - name: Apply microservice ServiceMonitor
        run: |
          kubectl apply -f deploy/monitoring/microservice-servicemonitor.yaml

      - name: Ensure monitoring stack
        run: |
          helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
          helm repo update
          helm upgrade --install monitoring prometheus-community/kube-prometheus-stack \
            --namespace monitoring \
            --create-namespace \
            -f deploy/monitoring/kube-prometheus-stack-values.yaml

      - name: Ensure ingress controller for monitoring
        run: |
          helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
          helm repo update
          helm upgrade --install ingress-nginx ingress-nginx/ingress-nginx \
            --namespace ingress-nginx \
            --create-namespace \
            --set controller.service.type=LoadBalancer \
            --set controller.service.externalTrafficPolicy=Local \
            --set controller.service.loadBalancerIP=${{ env.INGRESS_PUBLIC_IP }} \
            --set controller.service.annotations."service\.beta\.kubernetes\.io/azure-load-balancer-resource-group"=microservices-dev-rg \
            --set controller.service.annotations."service\.beta\.kubernetes\.io/azure-disable-load-balancer-floating-ip"="true" \
            --set controller.imagePullSecrets[0].name=acr-pull-secret \
            --set defaultBackend.imagePullSecrets[0].name=acr-pull-secret \
            --set admissionWebhooks.patch.image.registry=${{ secrets.ACR_LOGIN_SERVER }} \
            --set admissionWebhooks.patch.image.image=monitoring/kube-webhook-certgen \
            --set admissionWebhooks.patch.image.tag=v1.6.3 \
            --set controller.admissionWebhooks.enabled=false \
            --set admissionWebhooks.enabled=false

      - name: Apply monitoring ingress only
        run: |
          kubectl apply -f deploy/ingress/monitoring-ingress.yaml
